use std::fs::File;
use std::io::{self, BufReader, BufRead};
use std::env;

fn main() -> io::Result<()> {
    let args: Vec<String> = env::args().collect();
    let input = &args[1];

    let problem = read_input(input)?;
    solve1(&problem);

    Ok(())
}

fn solve1(problem: &Problem) {
    let res =
        problem.secret_numbers.iter()
                              .map(|secret| {
                                let mut secret = *secret;
                                for _ in 0..2000 {
                                    secret = secret_to_secret(secret);
                                }
                                secret
                              }).sum::<i64>();
    println!("What is the sum of the 2000th secret number generated by each buyer? {}", res);

}

fn secret_to_secret(secret_number: i64) -> i64 {
    let mut new_secret = secret_number;

    let multiplied_value = new_secret * 64;
    new_secret = mix_into(new_secret, multiplied_value);
    new_secret = prune(new_secret);

    let divided_value = new_secret / 32;
    new_secret = mix_into(new_secret, divided_value);
    new_secret = prune(new_secret);

    let multiplied_value = new_secret * 2048;
    new_secret = mix_into(new_secret, multiplied_value);
    new_secret = prune(new_secret);

    new_secret
}


fn mix_into(secret_number: i64, value: i64) -> i64 {
    secret_number ^ value
}

fn prune(secret_number: i64) -> i64 {
    secret_number % 16777216
}

struct Problem {
    secret_numbers: Vec<i64>,
}

impl Problem {
    fn new(secret_numbers: Vec<i64>) -> Self {
        Problem { secret_numbers }
    }
}

fn read_input(filename: &String) ->  io::Result<Problem> {
    let file_in = File::open(filename)?;
    Ok(Problem::new( BufReader::new(file_in).lines()
                                            .map(|x| x.unwrap().parse::<i64>().unwrap())
                                            .collect() ) )
}
